# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_data.coco.ipynb (unless otherwise specified).

__all__ = ['get_tiny_lm_dsets', 'get_small_lm_dsets']

# Cell
from fastai2.basics import *
from fastai2.text.all import *
from pycocotools.coco import COCO

# Cell
_train_img_path = '/root/data/coco/train2014'
_train_anno_path = '/root/data/coco/annotations/captions_train2014.json'
_val_img_path = '/root/data/coco/val2014'
_val_anno_path = '/root/data/coco/annotations/captions_val2014.json'
_tiny_img_path = './tiny_data/tiny_imgs'
_tiny_anno_path = './tiny_data/captions_tiny.json'

# Cell
def _get_captions(coco):
    anns = coco.dataset['annotations']
    captions = [ann['caption'] for ann in anns]
    return captions

# Cell
def _get_lm_dsets(captions, pct=1, valid_pct=0.2):
    captions = captions[:int(len(captions)*pct)]
    df = pd.DataFrame({'caption': captions})
    splits = RandomSplitter(seed=42, valid_pct=valid_pct)(df)
    tfms = [attrgetter('text'), Tokenizer.from_df('caption'), Numericalize()]
    dsets = Datasets(df, [tfms], splits=splits, dl_type=LMDataLoader)
    return dsets

# Cell
def get_tiny_lm_dsets(pct=1, valid_pct=0.2):
    coco = COCO(_tiny_anno_path)
    captions = _get_captions(coco)
    lm_dsets = _get_lm_dsets(captions, pct, valid_pct)
    return lm_dsets
# export
def get_small_lm_dsets(pct=1, valid_pct=0.2):
    coco = COCO(_val_anno_path)
    captions = _get_captions(coco)
    lm_dsets = _get_lm_dsets(captions, pct, valid_pct)
    return lm_dsets